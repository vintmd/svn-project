1.装饰模式，特别适合对某个类型的对象，动态的增加新的职责，应用程序就像使用原来的对象一样使用对象新增的装饰
后的功能，装 饰模式就好像是穿了一层层的外壳，这样的方式避免了通过继承来为类型添加新的职责的形式可取，通过继承的方式容易造成子类的膨胀，但是当装饰类太多的时 候，也是个难以维护的问题，至少是在装饰对象的时候，我们可能需要多步操作来完成对象的装饰，

2. 享元模式的意图是通过共享有效支持大量细粒度的对象，来提供应用程序的性能，节省系统中重复创建对象实例的性能消耗:
一般用来管理对象池。
使用场景：	（1）、当我们系统中某个对象类型的实例较多的情况。
		（2）、并且要求这些实例进行分类后，发现真正有区别的分类很少的情况。

3.代理模式：隐藏真实的对象，使对真实对象的访问更加安全可靠。

4.模板方法，简单工厂，工厂，抽象工厂，单例

5.观察者

6.策略模式+工厂

7.适配器

8.原型：深度、浅度拷贝 职责连 状态






9.桥接，状态，组合，

10.命令，访问者，备忘录，中介模式，解释器。